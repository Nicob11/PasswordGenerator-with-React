{"ast":null,"code":"const upperCase = Array.from({\n  length: 26\n}, (_, i) => String.fromCharCode(i + 65));\nconst lowerCase = upperCase.map(char => char.toLowerCase());\nconst numbers = Array.from({\n  length: 10\n}, (_, i) => i);\nconst symbols = ['*', '!', '.', '-', '#', '@'];\nexport default function encode(_ref) {\n  let {\n    includeMajus,\n    includeNumbers,\n    includeSymbols,\n    passwordLength = 8\n  } = _ref;\n  const includedSets = [lowerCase];\n  if (includeMajus) includedSets.push(upperCase);\n  if (includeNumbers) includedSets.push(numbers);\n  if (includeSymbols) includedSets.push(symbols);\n  const passwordArray = [];\n  for (let i = passwordLength; i > 0; i--) {\n    const randomSet = Math.floor(Math.random() * includedSets.length);\n    const randomChar = Math.floor(Math.random() * includedSets[randomSet].length);\n    passwordArray.push(includedSets[randomSet][randomChar]);\n  }\n  ;\n  return passwordArray.join('');\n}","map":{"version":3,"names":["upperCase","Array","from","length","_","i","String","fromCharCode","lowerCase","map","char","toLowerCase","numbers","symbols","encode","_ref","includeMajus","includeNumbers","includeSymbols","passwordLength","includedSets","push","passwordArray","randomSet","Math","floor","random","randomChar","join"],"sources":["/workspace/PasswordGenerator-with-React/src/utils/functions.js"],"sourcesContent":["const upperCase = Array.from({ length: 26 }, (_, i) => String.fromCharCode(i + 65));\n    const lowerCase = upperCase.map(char => char.toLowerCase());\n    const numbers = Array.from({ length: 10 }, (_, i) => i);\n    const symbols = ['*', '!', '.', '-', '#', '@'];\n     export default function encode({\n    includeMajus,\n    includeNumbers,\n    includeSymbols,\n    passwordLength = 8\n  }) {\n    const includedSets = [lowerCase];\n    if (includeMajus) includedSets.push(upperCase);\n    if (includeNumbers) includedSets.push(numbers);\n    if (includeSymbols) includedSets.push(symbols);\n    const passwordArray = [];\n    for (let i = passwordLength; i > 0; i--) {\n        const randomSet = Math.floor(Math.random() * includedSets.length);\n        const randomChar = Math.floor(Math.random() * includedSets[randomSet].length);\n        passwordArray.push(includedSets[randomSet][randomChar]);\n    };\n    return passwordArray.join('');\n}"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAE;AAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKC,MAAM,CAACC,YAAY,CAACF,CAAC,GAAG,EAAE,CAAC,CAAC;AAC/E,MAAMG,SAAS,GAAGR,SAAS,CAACS,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,WAAW,EAAE,CAAC;AAC3D,MAAMC,OAAO,GAAGX,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAE;AAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC;AACvD,MAAMQ,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAC7C,eAAe,SAASC,MAAMA,CAAAC,IAAA,EAK9B;EAAA,IAL+B;IAChCC,YAAY;IACZC,cAAc;IACdC,cAAc;IACdC,cAAc,GAAG;EACnB,CAAC,GAAAJ,IAAA;EACC,MAAMK,YAAY,GAAG,CAACZ,SAAS,CAAC;EAChC,IAAIQ,YAAY,EAAEI,YAAY,CAACC,IAAI,CAACrB,SAAS,CAAC;EAC9C,IAAIiB,cAAc,EAAEG,YAAY,CAACC,IAAI,CAACT,OAAO,CAAC;EAC9C,IAAIM,cAAc,EAAEE,YAAY,CAACC,IAAI,CAACR,OAAO,CAAC;EAC9C,MAAMS,aAAa,GAAG,EAAE;EACxB,KAAK,IAAIjB,CAAC,GAAGc,cAAc,EAAEd,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACrC,MAAMkB,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,YAAY,CAACjB,MAAM,CAAC;IACjE,MAAMwB,UAAU,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,YAAY,CAACG,SAAS,CAAC,CAACpB,MAAM,CAAC;IAC7EmB,aAAa,CAACD,IAAI,CAACD,YAAY,CAACG,SAAS,CAAC,CAACI,UAAU,CAAC,CAAC;EAC3D;EAAC;EACD,OAAOL,aAAa,CAACM,IAAI,CAAC,EAAE,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}